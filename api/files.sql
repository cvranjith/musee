
-- Generated by ORDS REST Data Services 23.2.3.r2421937
-- Schema: WKSP_MUSEE  Date: Mon Oct 09 03:16:22 2023 
--

BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'WKSP_MUSEE',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'musee',
      p_auto_rest_auth      => FALSE);
    
  ORDS.DEFINE_MODULE(
      p_module_name    => 'files',
      p_base_path      => '/files/',
      p_items_per_page => 25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'files',
      p_pattern        => ':id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'files',
      p_pattern        => ':id',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'declare
 l_id varchar2(2000);
 l_ins boolean := true;
 l_ref_id varchar2(200);
 o json_object_t;
begin
     if :file_name is null or :file_type is null
     then
         :status_code := 400;
         htp.p(''{"error":"missing http header file_name or file_type"}'');
         l_ins := false;
     end if;
     l_ref_id := :ref_id;
     if l_ref_id is not null
     then
         begin
             select id
             into   l_ref_id
             from   vw_ids
             where  id = l_ref_id
             and rownum =1;
        exception when others then
            :status_code := 400;
            htp.p(''{"error":"invalid ref_id"}'');
            l_ins := false;
        end;
     end if;
    begin
    l_id :=get_user_from_token;
    exception when others then :status_code := 401; l_ins := false;
    end;
    if l_ins then
     if :id in (''upload'',''new'')
     then
         l_id := sys_guid();
     else
        l_id := :id;
        delete tb_files where id = l_id;
        if sql%rowcount=' || '0 then :status_code := ''404''; l_ins := false; end if;
     end if;
     if l_ins then
        insert into tb_files (id,file_name,content_type,content,ref_id)
             values  (l_id,:file_name,:file_type,:body,l_ref_id);
        :status_code := 201;
        --htp.p(''{"''||tags.fileId||''":"'' ||l_id|| ''"}'');
        o := new JSON_OBJECT_t;
        o.put(tags.fileId,l_id);
        o.put(tags.refId,l_ref_id);
        o.put(tags.fileName,:file_name);
        o.put(tags.contentType,:file_type);
        o.put(tags.auditLog, fn_audit_log(l_id));
        htp.p(o.to_string());
     end if;
     end if;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'files',
      p_pattern            => ':id',
      p_method             => 'POST',
      p_name               => 'file_name',
      p_bind_variable_name => 'file_name',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'files',
      p_pattern            => ':id',
      p_method             => 'POST',
      p_name               => 'file_type',
      p_bind_variable_name => 'file_type',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'files',
      p_pattern            => ':id',
      p_method             => 'POST',
      p_name               => 'ref_id',
      p_bind_variable_name => 'ref_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'files',
      p_pattern        => ':id',
      p_method         => 'GET',
      p_source_type    => 'resource/lob',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT nvl(CONTENT_TYPE,''text/html'') CONTENT_TYPE,
       CONTENT
  FROM TB_FILES
 WHERE ID = :id');

    
        
COMMIT;

END;